#!/usr/bin/env zsh
# vim: set ft=zsh:

# Note that this uses 'gem' from your environment. So if you
# do nothing, it'll likely be the gem/ruby that was installed
# by homebrew. But if you prefer a different ruby (e.g. rbenv)
# then you should install that and setup the path correctly.

# {{- $cmd := joinPath .chezmoi.sourceDir "support/checksum.sh" }}
# {{- $pkgs := joinPath .chezmoi.sourceDir "packages.yaml" }}
# {{- $upkgs := joinPath .chezmoi.homeDir ".config/bmatheny/packages.yaml" }}

# packages.yaml hash: {{ output $cmd $pkgs "gems" | trim }}
# ~/.config/bmatheny/packages.yaml hash: {{ output $cmd $upkgs "gems" | trim }}

function error_fn {
  echo "Exiting with error: '$1'"
  exit 1
}

if (( ! $+commands[brew] )); then
  homebrew_locations=(
    "${HOME}/homebrew"
    "/usr/local")
  for location in $homebrew_locations; do
    if [[ -d "${location}/bin" && -x "${location}/bin/brew" ]]; then
      eval "$(${location}/bin/brew shellenv)"
      break
    fi
  done
fi

(( $+commands[brew] )) || error_fn "Could not find homebrew"
(( $+commands[chezmoi] )) || error_fn "Could not find chezmoi"
(( $+commands[shyaml] )) || error_fn "Could not find shyaml"

packages="$(chezmoi source-path)/packages.yaml"
[[ -f "${packages}" ]] || error_fn "Could not find packages file '${packages}'"

function install_gem {
  local gem="$1"
  if gem info --installed --silent "${gem}"; then
    echo "Updating gem '${gem}'"
    gem update --silent "${gem}" || error_fn "Failed to update gem '$gem'"
  else
    echo "Installing gem '${gem}'"
    gem install --silent "${gem}" || error_fn "Failed to install gem '$gem'"
  fi
}

function install_gems_from_file {
  local file="$1"
  if [[ -f "${file}" ]]; then
    for gem in $(cat "${file}" | shyaml -q get-values gems | tr "\n" " "); do
      install_gem "${gem}"
    done
  fi
}

echo "Updating ruby gems"

install_gems_from_file "$packages"
install_gems_from_file "$HOME/.config/bmatheny/packages.yaml"

exit 0
